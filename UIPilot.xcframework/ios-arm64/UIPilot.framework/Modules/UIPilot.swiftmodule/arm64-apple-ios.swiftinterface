// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UIPilot
import Combine
import Foundation
import Swift
import SwiftUI
import _Concurrency
public class UIPilot<T> : Combine.ObservableObject where T : Swift.Equatable {
  public var stack: [T] {
    get
  }
  public init(initial: T, debug: Swift.Bool = false)
  public func push(_ route: T)
  public func pop()
  public func popTo(_ route: T, inclusive: Swift.Bool = false)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public typealias RouteMap<T> = (T) -> SwiftUI.AnyView
@_Concurrency.MainActor(unsafe) public struct UIPilotHost<T> : SwiftUI.View where T : Swift.Equatable {
  @_Concurrency.MainActor(unsafe) public init(_ pilot: UIPilot<T>, _ routeMap: @escaping RouteMap<T>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7UIPilot0A4HostV4bodyQrvp", 0) __<T>
}
