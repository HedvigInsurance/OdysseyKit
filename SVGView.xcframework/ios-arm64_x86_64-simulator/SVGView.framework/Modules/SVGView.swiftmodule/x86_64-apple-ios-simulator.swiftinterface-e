// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SVGView
import Combine
import CoreGraphics
import Foundation
import Swift
import SwiftUI
import _Concurrency
@_inheritsConvenienceInitializers @objc public class SVGViewResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public class SVGDataImage : SVGView.SVGImage, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($data) public var data: Foundation.Data {
    get
    set
    _modify
  }
  public var $data: Combine.Published<Foundation.Data>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, width: CoreGraphics.CGFloat = 0, height: CoreGraphics.CGFloat = 0, data: Foundation.Data)
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGURLImage : SVGView.SVGImage, Foundation.ObservableObject {
  final public let src: Swift.String
  final public let data: Foundation.Data?
  public init(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, width: CoreGraphics.CGFloat = 0, height: CoreGraphics.CGFloat = 0, src: Swift.String, data: Foundation.Data?)
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGGroup : SVGView.SVGNode, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($contents) public var contents: [SVGView.SVGNode] {
    get
    set
    _modify
  }
  public var $contents: Combine.Published<[SVGView.SVGNode]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(contents: [SVGView.SVGNode], transform: CoreGraphics.CGAffineTransform = .identity, opaque: Swift.Bool = true, opacity: Swift.Double = 1, clip: SVGView.SVGUserSpaceNode? = nil, mask: SVGView.SVGNode? = nil)
  override public func bounds() -> CoreGraphics.CGRect
  override public func getNode(byId id: Swift.String) -> SVGView.SVGNode?
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGImage : SVGView.SVGNode {
  @Combine.Published @_projectedValueProperty($x) public var x: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $x: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($y) public var y: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $y: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($width) public var width: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $width: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($height) public var height: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $height: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, width: CoreGraphics.CGFloat = 0, height: CoreGraphics.CGFloat = 0)
  @objc deinit
}
public class SVGNode {
  @Combine.Published @_projectedValueProperty($transform) public var transform: CoreGraphics.CGAffineTransform {
    get
    set
    _modify
  }
  public var $transform: Combine.Published<CoreGraphics.CGAffineTransform>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($opaque) public var opaque: Swift.Bool {
    get
    set
    _modify
  }
  public var $opaque: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($opacity) public var opacity: Swift.Double {
    get
    set
    _modify
  }
  public var $opacity: Combine.Published<Swift.Double>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($clip) public var clip: SVGView.SVGNode? {
    get
    set
    _modify
  }
  public var $clip: Combine.Published<SVGView.SVGNode?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($mask) public var mask: SVGView.SVGNode? {
    get
    set
    _modify
  }
  public var $mask: Combine.Published<SVGView.SVGNode?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($id) public var id: Swift.String? {
    get
    set
    _modify
  }
  public var $id: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(transform: CoreGraphics.CGAffineTransform = .identity, opaque: Swift.Bool = true, opacity: Swift.Double = 1, clip: SVGView.SVGNode? = nil, mask: SVGView.SVGNode? = nil, id: Swift.String? = nil)
  public func bounds() -> CoreGraphics.CGRect
  public func frame() -> CoreGraphics.CGRect
  public func getNode(byId id: Swift.String) -> SVGView.SVGNode?
  public func onTapGesture(_ count: Swift.Int = 1, tapClosure: @escaping () -> ())
  public func addGesture<T>(_ newGesture: T) where T : SwiftUI.Gesture
  public func removeAllGestures()
  @objc deinit
}
extension SVGView.SVGNode {
  public func toSwiftUI() -> some SwiftUI.View
  
}
@_inheritsConvenienceInitializers public class SVGShape : SVGView.SVGNode {
  @Combine.Published @_projectedValueProperty($fill) public var fill: SVGView.SVGPaint? {
    get
    set
    _modify
  }
  public var $fill: Combine.Published<SVGView.SVGPaint?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($stroke) public var stroke: SVGView.SVGStroke? {
    get
    set
    _modify
  }
  public var $stroke: Combine.Published<SVGView.SVGStroke?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  override public init(transform: CoreGraphics.CGAffineTransform = super, opaque: Swift.Bool = super, opacity: Swift.Double = super, clip: SVGView.SVGNode? = nil, mask: SVGView.SVGNode? = nil, id: Swift.String? = nil)
  @objc deinit
}
public class SVGText : SVGView.SVGNode, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) public var text: Swift.String {
    get
    set
    _modify
  }
  public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($font) public var font: SVGView.SVGFont? {
    get
    set
    _modify
  }
  public var $font: Combine.Published<SVGView.SVGFont?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($fill) public var fill: SVGView.SVGPaint? {
    get
    set
    _modify
  }
  public var $fill: Combine.Published<SVGView.SVGPaint?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($stroke) public var stroke: SVGView.SVGStroke? {
    get
    set
    _modify
  }
  public var $stroke: Combine.Published<SVGView.SVGStroke?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($textAnchor) public var textAnchor: SwiftUI.HorizontalAlignment {
    get
    set
    _modify
  }
  public var $textAnchor: Combine.Published<SwiftUI.HorizontalAlignment>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(text: Swift.String, font: SVGView.SVGFont? = nil, fill: SVGView.SVGPaint? = SVGColor.black, stroke: SVGView.SVGStroke? = nil, textAnchor: SwiftUI.HorizontalAlignment = .leading, transform: CoreGraphics.CGAffineTransform = .identity, opaque: Swift.Bool = true, opacity: Swift.Double = 1, clip: SVGView.SVGUserSpaceNode? = nil, mask: SVGView.SVGNode? = nil)
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGUserSpaceNode : SVGView.SVGNode {
  public enum UserSpace : Swift.String {
    case objectBoundingBox
    case userSpaceOnUse
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SVGView.SVGUserSpaceNode.UserSpace]
    public typealias RawValue = Swift.String
    public static var allCases: [SVGView.SVGUserSpaceNode.UserSpace] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  final public let node: SVGView.SVGNode
  final public let userSpace: SVGView.SVGUserSpaceNode.UserSpace
  public init(node: SVGView.SVGNode, userSpace: SVGView.SVGUserSpaceNode.UserSpace)
  public func contentView() -> some SwiftUI.View
  
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SVGColor : SVGView.SVGPaint {
  public static let black: SVGView.SVGColor
  public static let clear: SVGView.SVGColor
  public static func by(name: Swift.String) -> SVGView.SVGColor?
  final public let value: Swift.Int
  public init(_ value: Swift.Int = 0)
  convenience public init(r: Swift.Int, g: Swift.Int, b: Swift.Int, t: Swift.Int = 0)
  convenience public init(r: Swift.Int, g: Swift.Int, b: Swift.Int, opacity: Swift.Double)
  convenience public init(hex: Swift.String)
  public func toSwiftUI() -> SwiftUI.Color
  public var r: Swift.Int {
    get
  }
  public var g: Swift.Int {
    get
  }
  public var b: Swift.Int {
    get
  }
  override public func opacity(_ opacity: Swift.Double) -> SVGView.SVGColor
  @objc deinit
}
public func == (lhs: SVGView.SVGColor, rhs: SVGView.SVGColor) -> Swift.Bool
public class SVGFont {
  final public let name: Swift.String
  final public let size: CoreGraphics.CGFloat
  final public let weight: Swift.String
  public init(name: Swift.String = "Serif", size: CoreGraphics.CGFloat = 16, weight: Swift.String = "normal")
  public func toSwiftUI() -> SwiftUI.Font
  @objc deinit
}
public class SVGLinearGradient : SVGView.SVGGradient {
  final public let x1: CoreGraphics.CGFloat
  final public let y1: CoreGraphics.CGFloat
  final public let x2: CoreGraphics.CGFloat
  final public let y2: CoreGraphics.CGFloat
  public init(x1: CoreGraphics.CGFloat = 0, y1: CoreGraphics.CGFloat = 0, x2: CoreGraphics.CGFloat = 0, y2: CoreGraphics.CGFloat = 0, userSpace: Swift.Bool = false, stops: [SVGView.SVGStop] = [])
  convenience public init(degree: CoreGraphics.CGFloat = 0, from: SVGView.SVGColor, to: SVGView.SVGColor)
  public init(degree: CoreGraphics.CGFloat = 0, stops: [SVGView.SVGStop])
  public func toSwiftUI(rect: CoreGraphics.CGRect) -> SwiftUI.LinearGradient
  @objc deinit
}
public class SVGRadialGradient : SVGView.SVGGradient {
  final public let cx: CoreGraphics.CGFloat
  final public let cy: CoreGraphics.CGFloat
  final public let fx: CoreGraphics.CGFloat
  final public let fy: CoreGraphics.CGFloat
  final public let r: CoreGraphics.CGFloat
  public init(cx: CoreGraphics.CGFloat = 0.5, cy: CoreGraphics.CGFloat = 0.5, fx: CoreGraphics.CGFloat = 0.5, fy: CoreGraphics.CGFloat = 0.5, r: CoreGraphics.CGFloat = 0.5, userSpace: Swift.Bool = false, stops: [SVGView.SVGStop] = [])
  public func toSwiftUI(rect: CoreGraphics.CGRect) -> SwiftUI.RadialGradient
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SVGGradient : SVGView.SVGPaint, Swift.Equatable {
  public static func == (lhs: SVGView.SVGGradient, rhs: SVGView.SVGGradient) -> Swift.Bool
  final public let userSpace: Swift.Bool
  final public let stops: [SVGView.SVGStop]
  public init(userSpace: Swift.Bool = false, stops: [SVGView.SVGStop] = [])
  @objc deinit
}
public class SVGStop : Swift.Equatable {
  public static func == (lhs: SVGView.SVGStop, rhs: SVGView.SVGStop) -> Swift.Bool
  final public let color: SVGView.SVGColor
  final public let offset: CoreGraphics.CGFloat
  public init(color: SVGView.SVGColor, offset: CoreGraphics.CGFloat = 0)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SVGPaint {
  public func opacity(_ opacity: Swift.Double) -> SVGView.SVGPaint
  @objc deinit
}
public class SVGPreserveAspectRatio {
  final public let scaling: SVGView.SVGPreserveAspectRatio.Scaling
  final public let xAlign: SVGView.SVGPreserveAspectRatio.Align
  final public let yAlign: SVGView.SVGPreserveAspectRatio.Align
  public init(scaling: SVGView.SVGPreserveAspectRatio.Scaling = .meet, xAlign: SVGView.SVGPreserveAspectRatio.Align = .mid, yAlign: SVGView.SVGPreserveAspectRatio.Align = .mid)
  public func layout(size: CoreGraphics.CGSize, into sizeToFitIn: CoreGraphics.CGSize) -> CoreGraphics.CGAffineTransform
  public func layout(rect: CoreGraphics.CGRect, into sizeToFitIn: CoreGraphics.CGSize) -> CoreGraphics.CGAffineTransform
  public func slice(size: CoreGraphics.CGSize, into rectToFitIn: CoreGraphics.CGRect) -> CoreGraphics.CGRect?
  public enum Align : Swift.String {
    case mid
    case min
    case max
    public func align(outer: CoreGraphics.CGFloat, inner: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
    public func align(size: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SVGView.SVGPreserveAspectRatio.Align]
    public typealias RawValue = Swift.String
    public static var allCases: [SVGView.SVGPreserveAspectRatio.Align] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Scaling : Swift.String {
    case meet
    case slice
    case none
    public func fit(size: CoreGraphics.CGSize, into sizeToFitIn: CoreGraphics.CGSize) -> CoreGraphics.CGSize
    public func fit(rect: CoreGraphics.CGRect, into rectToFitIn: CoreGraphics.CGRect) -> CoreGraphics.CGSize
    public func fit(size: CoreGraphics.CGSize, into rectToFitIn: CoreGraphics.CGRect) -> CoreGraphics.CGSize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SVGView.SVGPreserveAspectRatio.Scaling]
    public typealias RawValue = Swift.String
    public static var allCases: [SVGView.SVGPreserveAspectRatio.Scaling] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public class SVGStroke {
  final public let fill: SVGView.SVGPaint
  final public let width: CoreGraphics.CGFloat
  final public let cap: CoreGraphics.CGLineCap
  final public let join: CoreGraphics.CGLineJoin
  final public let miterLimit: CoreGraphics.CGFloat
  final public let dashes: [CoreGraphics.CGFloat]
  final public let offset: CoreGraphics.CGFloat
  public init(fill: SVGView.SVGPaint = SVGColor.black, width: CoreGraphics.CGFloat = 1, cap: CoreGraphics.CGLineCap = .butt, join: CoreGraphics.CGLineJoin = .miter, miterLimit: CoreGraphics.CGFloat = 4, dashes: [CoreGraphics.CGFloat] = [], offset: CoreGraphics.CGFloat = 0.0)
  public func toSwiftUI() -> SwiftUI.StrokeStyle
  @objc deinit
}
public class SVGCircle : SVGView.SVGShape, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($cx) public var cx: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $cx: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($cy) public var cy: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $cy: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($r) public var r: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $r: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(cx: CoreGraphics.CGFloat = 0, cy: CoreGraphics.CGFloat = 0, r: CoreGraphics.CGFloat = 0)
  override public func frame() -> CoreGraphics.CGRect
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGEllipse : SVGView.SVGShape, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($cx) public var cx: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $cx: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($cy) public var cy: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $cy: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($rx) public var rx: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $rx: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($ry) public var ry: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $ry: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(cx: CoreGraphics.CGFloat = 0, cy: CoreGraphics.CGFloat = 0, rx: CoreGraphics.CGFloat = 0, ry: CoreGraphics.CGFloat = 0)
  override public func frame() -> CoreGraphics.CGRect
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGLine : SVGView.SVGShape, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($x1) public var x1: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $x1: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($y1) public var y1: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $y1: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($x2) public var x2: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $x2: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($y2) public var y2: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $y2: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(_ x1: CoreGraphics.CGFloat, _ y1: CoreGraphics.CGFloat, _ x2: CoreGraphics.CGFloat, _ y2: CoreGraphics.CGFloat)
  public init(x1: CoreGraphics.CGFloat = 0, y1: CoreGraphics.CGFloat = 0, x2: CoreGraphics.CGFloat = 0, y2: CoreGraphics.CGFloat = 0)
  override public func frame() -> CoreGraphics.CGRect
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGPath : SVGView.SVGShape, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($segments) public var segments: [SVGView.PathSegment] {
    get
    set
    _modify
  }
  public var $segments: Combine.Published<[SVGView.PathSegment]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($fillRule) public var fillRule: CoreGraphics.CGPathFillRule {
    get
    set
    _modify
  }
  public var $fillRule: Combine.Published<CoreGraphics.CGPathFillRule>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(segments: [SVGView.PathSegment] = [], fillRule: CoreGraphics.CGPathFillRule = .winding)
  override public func frame() -> CoreGraphics.CGRect
  override public func bounds() -> CoreGraphics.CGRect
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGPolygon : SVGView.SVGShape, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($points) public var points: [CoreGraphics.CGPoint] {
    get
    set
    _modify
  }
  public var $points: Combine.Published<[CoreGraphics.CGPoint]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(_ points: [CoreGraphics.CGPoint])
  public init(points: [CoreGraphics.CGPoint] = [])
  override public func frame() -> CoreGraphics.CGRect
  override public func bounds() -> CoreGraphics.CGRect
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGPolyline : SVGView.SVGShape, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($points) public var points: [CoreGraphics.CGPoint] {
    get
    set
    _modify
  }
  public var $points: Combine.Published<[CoreGraphics.CGPoint]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(_ points: [CoreGraphics.CGPoint])
  public init(points: [CoreGraphics.CGPoint] = [])
  override public func frame() -> CoreGraphics.CGRect
  override public func bounds() -> CoreGraphics.CGRect
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SVGRect : SVGView.SVGShape, Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($x) public var x: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $x: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($y) public var y: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $y: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($width) public var width: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $width: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($height) public var height: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $height: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($rx) public var rx: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $rx: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($ry) public var ry: CoreGraphics.CGFloat {
    get
    set
    _modify
  }
  public var $ry: Combine.Published<CoreGraphics.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, width: CoreGraphics.CGFloat = 0, height: CoreGraphics.CGFloat = 0, rx: CoreGraphics.CGFloat = 0, ry: CoreGraphics.CGFloat = 0)
  public init(_ rect: CoreGraphics.CGRect)
  override public func frame() -> CoreGraphics.CGRect
  public func contentView() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SVGConstants {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SVGParserRegexHelper {
  @objc deinit
}
public struct SVGParser {
  public static func parse(contentsOf url: Foundation.URL, settings: SVGView.SVGSettings = .default) -> SVGView.SVGNode?
  public static func parse(data: Foundation.Data, settings: SVGView.SVGSettings = .default) -> SVGView.SVGNode?
  public static func parse(string: Swift.String, settings: SVGView.SVGSettings = .default) -> SVGView.SVGNode?
  public static func parse(stream: Foundation.InputStream, settings: SVGView.SVGSettings = .default) -> SVGView.SVGNode?
  public static func parse(xml: SVGView.XMLElement?, settings: SVGView.SVGSettings = .default) -> SVGView.SVGNode?
  @available(*, deprecated, message: "Use parse(contentsOf:) function instead")
  public static func parse(fileURL: Foundation.URL) -> SVGView.SVGNode?
}
@objc @_inheritsConvenienceInitializers public class SVGHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias MBezierPath = UIKit.UIBezierPath
public enum PathSegmentType {
  case M
  case L
  case C
  case Q
  case A
  case z
  case H
  case V
  case S
  case T
  case m
  case l
  case c
  case q
  case a
  case h
  case v
  case s
  case t
  case E
  case e
  public static func == (a: SVGView.PathSegmentType, b: SVGView.PathSegmentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class PathSegment {
  final public let type: SVGView.PathSegmentType
  final public let data: [CoreGraphics.CGFloat]
  public init(type: SVGView.PathSegmentType = .M, data: [CoreGraphics.CGFloat] = [])
  open func isAbsolute() -> Swift.Bool
  @objc deinit
}
public struct SVGView : SwiftUI.View {
  public let svg: SVGView.SVGNode?
  public init(contentsOf url: Foundation.URL)
  @available(*, deprecated, message: "Use (contentsOf:) initializer instead")
  public init(fileURL: Foundation.URL)
  public init(data: Foundation.Data)
  public init(string: Swift.String)
  public init(stream: Foundation.InputStream)
  public init(xml: SVGView.XMLElement)
  public init(svg: SVGView.SVGNode)
  public func getNode(byId id: Swift.String) -> SVGView.SVGNode?
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7SVGViewAAV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class SVGLinker {
  public static let none: SVGView.SVGLinker
  public static func base(url: Foundation.URL) -> SVGView.SVGLinker
  public static func relative(to svgURL: Foundation.URL) -> SVGView.SVGLinker
  public func load(src: Swift.String) throws -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SVGLogger {
  public static let console: SVGView.SVGLogger
  public func log(message: Swift.String)
  public func log(error: Swift.Error)
  @objc deinit
}
public struct SVGSettings {
  public static let `default`: SVGView.SVGSettings
  public let linker: SVGView.SVGLinker
  public let logger: SVGView.SVGLogger
  public let fontSize: CoreGraphics.CGFloat
  public let ppi: Swift.Double
  public init(linker: SVGView.SVGLinker = .none, logger: SVGView.SVGLogger = .console, fontSize: CoreGraphics.CGFloat = 16, ppi: CoreGraphics.CGFloat = 96)
}
public struct DOMParser {
  public static func parse(contentsOf url: Foundation.URL, logger: SVGView.SVGLogger = .console) -> SVGView.XMLElement?
  @available(*, deprecated, message: "Use parse(contentsOf:) function instead")
  public static func parse(fileURL: Foundation.URL, logger: SVGView.SVGLogger = .console) -> SVGView.XMLElement?
  public static func parse(data: Foundation.Data, logger: SVGView.SVGLogger = .console) -> SVGView.XMLElement?
  public static func parse(string: Swift.String?, using encoding: Swift.String.Encoding = .utf8, logger: SVGView.SVGLogger = .console) -> SVGView.XMLElement?
  public static func parse(stream: Foundation.InputStream, logger: SVGView.SVGLogger = .console) -> SVGView.XMLElement?
}
public protocol XMLNode {
}
public class XMLElement : SVGView.XMLNode {
  final public let name: Swift.String
  public var contents: [SVGView.XMLNode]
  public var attributes: [Swift.String : Swift.String]
  public init(name: Swift.String, attributes: [Swift.String : Swift.String])
  @objc deinit
}
public class XMLText : SVGView.XMLNode {
  public var text: Swift.String
  public init(text: Swift.String)
  @objc deinit
}
extension Swift.Bool {
  public func serialize() -> Swift.String
}
extension SVGView.SVGUserSpaceNode.UserSpace : Swift.Equatable {}
extension SVGView.SVGUserSpaceNode.UserSpace : Swift.CaseIterable {}
extension SVGView.SVGUserSpaceNode.UserSpace : Swift.RawRepresentable {}
extension SVGView.SVGUserSpaceNode.UserSpace : Swift.Hashable {}
extension SVGView.SVGPreserveAspectRatio.Align : Swift.Equatable {}
extension SVGView.SVGPreserveAspectRatio.Align : Swift.CaseIterable {}
extension SVGView.SVGPreserveAspectRatio.Align : Swift.RawRepresentable {}
extension SVGView.SVGPreserveAspectRatio.Align : Swift.Hashable {}
extension SVGView.SVGPreserveAspectRatio.Scaling : Swift.Equatable {}
extension SVGView.SVGPreserveAspectRatio.Scaling : Swift.CaseIterable {}
extension SVGView.SVGPreserveAspectRatio.Scaling : Swift.RawRepresentable {}
extension SVGView.SVGPreserveAspectRatio.Scaling : Swift.Hashable {}
extension SVGView.PathSegmentType : Swift.Equatable {}
extension SVGView.PathSegmentType : Swift.Hashable {}
